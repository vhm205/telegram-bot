# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Telegram bot with CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build image to docker hub
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    outputs:
      tag: ${{ steps.commit.outputs.short }}

    steps:
    - uses: actions/checkout@v3

    - name: Create docker image tag with hash commit
      id: commit
      uses: pr-mpt/actions-commit-hash@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # install applicaion dependencies
    - name: Install dependencies
      run: |
        npm install
        npm ci

    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Build Docker image
      run: docker build . --file Dockerfile --tag 102205/telegram-bot:${{ steps.commit.outputs.short }}

    - name: Push to Docker Hub
      run: docker push 102205/telegram-bot:${{ steps.commit.outputs.short }}

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Pull docker image in EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_BOT_HOST }}
        username: ${{ secrets.AWS_BOT_USERNAME }}
        key: ${{ secrets.AWS_EC2_BOT_SSH_KEY }}
        script: |
          cd /opt/telegram-bot
          # docker-compose down --rmi all
          docker rm -f $(docker ps -aq)
          docker rmi $(docker images -q)
          HASH_COMMIT_TAG=${{ needs.build.outputs.tag }} docker-compose pull
          HASH_COMMIT_TAG=${{ needs.build.outputs.tag }} docker-compose up -d

